import { NextRequest, NextResponse } from "next/server";
import { decodeJwtEdge, type DecodedToken } from "./src/lib/jwt-edge";

type RoleEn = "COMMON" | "ADMINISTRATOR" | "EVALUATOR" | "MANAGER";

const rules: Record<string, RoleEn[]> = {
  "/admin":     ["ADMINISTRATOR"],
  "/manager":   ["MANAGER"],
  "/evaluator": ["EVALUATOR"],
  "/company":   ["ADMINISTRATOR", "MANAGER"],
  "/user":      ["COMMON", "ADMINISTRATOR", "MANAGER", "EVALUATOR"],
};

const isPublic = (p: string) =>
  p === "/" ||
  p.startsWith("/login") ||
  p.startsWith("/register") ||   // ðŸ”“ registro via convite
  p.startsWith("/public") ||
  p.startsWith("/_next") ||
  p.startsWith("/favicon") ||
  p.startsWith("/api/dev/set-cookie"); // rota local de suporte

export function middleware(req: NextRequest) {
  const { pathname } = req.nextUrl;
  if (isPublic(pathname)) return NextResponse.next();

  const token = req.cookies.get("access_token")?.value;
  if (!token) {
    const login = new URL("/login", req.url);
    login.searchParams.set("next", pathname);
    return NextResponse.redirect(login);
  }

  const decoded = decodeJwtEdge<DecodedToken>(token);
  const role = decoded?.type_user as RoleEn | undefined;

  const prefix = ("/" + pathname.split("/").filter(Boolean)[0]) || "/";
  const allow = rules[prefix];
  if (!allow) return NextResponse.next();

  if (!role || !allow.includes(role)) {
    return NextResponse.redirect(new URL("/sem-permissao", req.url));
  }

  return NextResponse.next();
}

export const config = {
  matcher: [
    "/admin/:path*",
    "/manager/:path*",
    "/evaluator/:path*",
    "/company/:path*",
    "/user/:path*",
  ],
};
